public class Main {
    public static void main(String[] args) throws InterruptedException {
        Restaurant restaurant = Restaurant.getInstance();
//        Scanner in = new Scanner(System.in);
//        System.out.println("Enter ur order");
//        String order = in.nextLine();
//        String answer = restaurant.doOrder(order);
//        System.out.println(answer);


        for(int i=0;i<10;i++){
            new Thread(new TestTask(i,restaurant)).start();
//            Thread.sleep(1);
        }
        Thread.sleep(100);
        Restaurant.close();
        new Thread(new TestTask(999,restaurant)).start();
    }
}

public class TestTask implements Runnable {
    private int num;
    private Restaurant restaurant;

    public TestTask(int num, Restaurant restaurant) {
        this.num = num;
        this.restaurant = restaurant;
    }

    @Override
    public void run() {
        String currentOrder = "Order number:"+(num+1);
        System.out.println(currentOrder);
        System.out.println(restaurant.doOrder(currentOrder));
    }
}

public class Restaurant {
    private static Restaurant instance;
    private BlockingQueue<Order> newOrders;
    private BlockingQueue<Order> processedOrders;
    private BlockingQueue<Order> doneOrders;
    private List<Thread> waiterList;
    private List<Thread> cookList;
    private List<Client> clientList;
    private static Boolean closed = true;

    private Restaurant(){
        newOrders = new LinkedBlockingQueue<>();
        processedOrders = new LinkedBlockingQueue<>();
        doneOrders = new LinkedBlockingQueue<>();
        waiterList = new ArrayList<>();
        cookList = new ArrayList<>();
        clientList = Collections.synchronizedList(new ArrayList<>());
        closed = false;
        int numOfThreads = Runtime.getRuntime().availableProcessors();
        int numOfCooks = (numOfThreads%2!=0)?numOfThreads/2+1:numOfThreads/2;
        int numOfWaiters = (numOfCooks==numOfThreads)?1:numOfThreads-numOfCooks;
        numOfCooks = 1;
        numOfWaiters = 1;
        System.out.println("num "+numOfThreads);
        System.out.println("cooks "+numOfCooks);
        System.out.println("waiters "+ numOfWaiters);
        for(int i = 0;i<numOfCooks;i++){
            Cook cook = new Cook(processedOrders,doneOrders);
            Thread cookThread = new Thread(cook);
            cookThread.start();
            cookList.add(cookThread);
        }
        for(int i = 0;i<numOfWaiters;i++) {
            Waiter waiter = new Waiter(newOrders, processedOrders);
            Thread waiterThread = new Thread(waiter);
            waiterThread.start();
            waiterList.add(waiterThread);
        }
    }

    public static Restaurant getInstance(){
        if(instance==null)
            instance = new Restaurant();
        return instance;
    }

    public synchronized String doOrder(String stringOrder){
        if(closed)
            return "Cant do order: '"+stringOrder+"' because restaurant is closed";
        Client client = new Client(stringOrder,newOrders,doneOrders);
        clientList.add(client);
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        FutureTask<String> clientTask = new FutureTask<>(client);
        Thread clientThread = new Thread(clientTask);
        try {
            clientThread.start();
            String answer = clientTask.get();
//            synchronized (this) {
//                if (closed)
//                    this.notifyAll();
//            }
            clientList.remove(client);
            return answer;
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
            clientList.remove(client);
            return "Error while doing your order";
        }
    }

    public static void close(){
        closed = true;
        while(!Restaurant.getInstance().newOrders.isEmpty()
                ||!Restaurant.getInstance().processedOrders.isEmpty()
                ||!Restaurant.getInstance().doneOrders.isEmpty()/*
                ||!Restaurant.getInstance().clientList.isEmpty()*/){
            try {
                System.out.println("Waiting for orders to complete");
                synchronized (getInstance()){
                    getInstance().wait();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        for(Thread cookThread:Restaurant.getInstance().cookList)
            cookThread.interrupt();
        for(Thread waiterThread:Restaurant.getInstance().waiterList)
            waiterThread.interrupt();
        System.out.println("Restaurant closed");
    }
}

public class Order {
    private String orderText;
    private Exchanger<Order> exchanger;


    public Order(String orderText) {
        this.orderText = orderText;
        this.exchanger = new Exchanger<>();
    }

    public Exchanger<Order> getExchanger() {
        return exchanger;
    }

    public String getOrderText() {
        return orderText;
    }

    public void setOrderText(String orderText) {
        this.orderText = orderText;
    }
}

public class Cook extends Thread{
    private BlockingQueue<Order> processedOrders;
    private BlockingQueue<Order> doneOrders;

    public Cook(BlockingQueue<Order> processedOrders, BlockingQueue<Order> doneOrders) {
        this.processedOrders = processedOrders;
        this.doneOrders = doneOrders;
    }

    @Override
    public void run() {
        while(!Thread.currentThread().isInterrupted()){
            try {
                Order order = processedOrders.take();
                order.setOrderText("Your order: '" + order.getOrderText() + "' is done "/*+Thread.currentThread().getName()*/);
                doneOrders.put(order);
                order.getExchanger().exchange(order);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("Cook interrupted "+Thread.currentThread().getName());
//                e.printStackTrace();
            }
        }

    }
}


public class Client implements Callable<String>,Comparable<Client> {
    private Order order;
    private BlockingQueue<Order> newOrders;
    private BlockingQueue<Order> doneOrders;

    public Client(String strOrder, BlockingQueue<Order> newOrders, BlockingQueue<Order> doneOrders) {
        this.order = new Order(strOrder);
        this.newOrders = newOrders;
        this.doneOrders = doneOrders;
    }

    @Override
    public String call() throws Exception {
        newOrders.put(order);
        order.getExchanger().exchange(order);
        return doneOrders.take().getOrderText();

    }

    @Override
    public int compareTo(Client o) {
        return this.order.equals(o.order)?0:1;
    }
}

public class Waiter extends Thread {
    private BlockingQueue<Order> newOrders;
    private BlockingQueue<Order> processedOrders;

    public Waiter(BlockingQueue<Order> newOrders, BlockingQueue<Order> processedOrders) {
        this.newOrders = newOrders;
        this.processedOrders = processedOrders;
    }

    @Override
    public void run() {
        while(!Thread.currentThread().isInterrupted()){
            try {
                Order order = newOrders.take();
                order.setOrderText(order.getOrderText()/*+" "+Thread.currentThread().getName()*/);
                processedOrders.put(order);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("Waiter interrupted "+Thread.currentThread().getName());
//                e.printStackTrace();
            }
        }

    }
}
