package com.company.FilesTasks;

import com.company.FilesTasks.MyBufferedInputStream;
import com.company.FilesTasks.MyBufferedOutputStream;
import jdk.internal.util.xml.impl.Input;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Vector;

/**
 * Created by Ð® on 26.11.2018.
 */
public class FileHandler {

    public void copyFile(File sourceFile, File targetFile) throws IOException {
        try(
                InputStream sourceInStr = new FileInputStream(sourceFile);
                BufferedInputStream sourceBufInStr = new BufferedInputStream(sourceInStr);
                OutputStream targetOutStr = new FileOutputStream(targetFile);
                BufferedOutputStream targetBufOutStr = new BufferedOutputStream(targetOutStr);
                ){
            int b;
            while((b = sourceBufInStr.read())>-1){
                targetBufOutStr.write(b);
            }
        }
    }

    public void splitFileByByteLength(File sourceFile, long lengthOfNewFiles) throws IOException {
        int numOfFiles;
        if (sourceFile.length() % lengthOfNewFiles == 0)
            numOfFiles = (int) (sourceFile.length() / lengthOfNewFiles);
        else
            numOfFiles = (int) (sourceFile.length() / lengthOfNewFiles + 1);
        MyBufferedOutputStream[] buffOutStreams = new MyBufferedOutputStream[numOfFiles];
        String[] fileName = sourceFile.getName().split("\\.");
        for(int i = 0;i<buffOutStreams.length;i++) {
            buffOutStreams[i] = new MyBufferedOutputStream(fileName[0]+ "_" +"part" + (i+1) +  fileName[1]);
        }
        try(
                MyBufferedInputStream buffInStr = new MyBufferedInputStream(sourceFile)
        ){
            int currFileNum = 0;
            long currFileLength = 0;
            int b;
            while((b=buffInStr.read())>0){
                buffOutStreams[currFileNum].write(b);
                currFileLength++;
                if(currFileLength>=lengthOfNewFiles){
                    currFileNum++;
                    currFileLength = 0;
                }
            }
        }
        for(int i = 0;i<buffOutStreams.length;i++)
            buffOutStreams[i].close();
    }

    public void combineFiles(File[] files, String newFilePath) throws IOException {
        Vector<InputStream> inVector = new Vector<>();
        for(int i = 0;i<files.length;i++)
            inVector.add(new FileInputStream(files[i]));
        SequenceInputStream seqStream = new SequenceInputStream(inVector.elements());
        try(MyBufferedOutputStream buffOutStr = new MyBufferedOutputStream(newFilePath)){
            byte[] buf = new byte[1024];
            int len;

            while ((len = seqStream.read(buf)) > 0) {
                buffOutStr.write(buf, 0, len);
            }
        }
    }




}
public class MyBufferedInputStream extends BufferedInputStream {
    public MyBufferedInputStream(File file) throws FileNotFoundException {
        super(new FileInputStream(file));
    }
}
public class MyBufferedOutputStream extends BufferedOutputStream {
    public MyBufferedOutputStream(File file) throws FileNotFoundException {
        super(new FileOutputStream(file));
    }
    public MyBufferedOutputStream(String fileName) throws FileNotFoundException  {
        super(new FileOutputStream(fileName));
    }
}
public class Tasks {
    public long doTaskOne(String firstFilePath, String secondFilePath) throws IOException {
        File file1 = new File(firstFilePath);
        File file2 = new File(secondFilePath);
        FileHandler handler = new FileHandler();
        if(file1.exists()){
            handler.copyFile(file1,file2);
            return file1.length();
        }
        else {
            throw new IOException("First file doesn't exist");
        }
    }
    public void doTaskTwoSplit(String filePath, long lengthOfNewFiles) throws IOException {
        File file = new File(filePath);
        FileHandler handler = new FileHandler();
        if(file.exists()){
            handler.splitFileByByteLength(file,lengthOfNewFiles);
        }
        else {
            throw new IOException("File doesn't exist");
        }
    }
    public void doTaskTwoCombine(String[] fileNames, String newFilePath) throws IOException {
        File[] files = new File[fileNames.length];
        FileHandler handler = new FileHandler();
        for(int i = 0;i<files.length;i++) {
            files[i] = new File(fileNames[i]);
            if(!files[i].exists())
                throw new IOException("File number "+(i+1)+"doesn't exist");
        }
        handler.combineFiles(files,newFilePath);
    }
}
public class Main {
    public static void main(String[] args) {
        Tasks tasks = new Tasks();
        Scanner input = new Scanner(System.in);
        //First task
        /*
        try{
            System.out.println("Path of file to copy:");
            String firstFileName = input.nextLine();
            System.out.println("Path of copy:");
            String secondFileName = input.next();
            System.out.println(tasks.doTaskOne(firstFileName,secondFileName));
        } catch (IOException e) {
            e.printStackTrace();
        }*/

        //Second task split
        try{
            System.out.println("Path of file to split:");
            String firstFileName = input.nextLine();
            System.out.println("Length in bytes of new files:");
            long lengthOfNewFiles = input.nextLong();
            tasks.doTaskTwoSplit(firstFileName,lengthOfNewFiles);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

}
