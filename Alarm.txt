public class Indexer implements Runnable{
    private WebPage webPage;
    private DatabaseIndexer databaseIndexer;
    private int numOfWords;

    public Indexer(WebPage webPage, DatabaseIndexer databaseIndexer) {
        this.webPage = webPage;
        this.databaseIndexer = databaseIndexer;
    }

    @Override
    public void run() {
        WordPack wordPack = parseText(webPage);
        List<WordWeightPos> wordWeightPosList = calculateWeights(wordPack);
        databaseIndexer.addWordWeightPosList(wordWeightPosList);
        databaseIndexer.setIndexedAndTime(webPage);
        updateAllTfIdf();
    }

    public WordPack parseText(WebPage webPage){
        Map<String,List<Integer>> wordMap = new HashMap<>();
        String[] sentences = webPage.getText().toLowerCase().replaceAll("[^a-zа-я.?!]"," ")
                .replaceAll("\\d"," ")
                .replaceAll("[\n\t]",".")
                .replaceAll("\\s+"," ")
                .split("[.?!]+");
        int currPos = 0;
        for(String sentence:sentences){
            if(!sentence.trim().isEmpty()) {
                currPos++;
                String[] words = sentence.trim().split("\\s+");
                for (String word : words) {
                    wordMap.computeIfAbsent(word, (v) -> new ArrayList<>());
                    wordMap.get(word).add(currPos);
                    currPos++;
                }
            }
        }
        numOfWords = currPos;
        if(wordMap.isEmpty())
            return null;
        else{
            return new WordPack(wordMap,numOfWords,webPage);
        }
    }

    private List<WordWeightPos> calculateWeights(WordPack wordPack){
        List<WordWeightPos> allWords = new ArrayList<>();
        for(Map.Entry<String,List<Integer>> entry : wordPack.getWordMap().entrySet()){
            Word word = databaseIndexer.getWordEntity(entry.getKey());
            Double tf = ((double) entry.getValue().size())/ wordPack.getNumOfWords();
            Double idf = getIdf(word);
            Double tfIdf = tf*idf;
            for(Integer pos:entry.getValue()) {
                WordWeightPos wordWeightPos = new WordWeightPos();
                wordWeightPos.setWord(word);
                wordWeightPos.setPage(webPage);
                wordWeightPos.setTf(tf);
                wordWeightPos.setTfIdf(tfIdf);
                wordWeightPos.setPosition(pos);
                allWords.add(wordWeightPos);
            }
        }
        return allWords;
    }

    private void updateAllTfIdf(){
        List<Word> wordList = databaseIndexer.getAllWords();
        for(Word word:wordList){
            Double idf = getIdf(word);
            List<WordWeightPos> wordWeightPosList = databaseIndexer.getWWPbyWord(word);
            for (WordWeightPos wwp : wordWeightPosList){
                Double tf = databaseIndexer.getTf(wwp);
                Double tfIdf = tf*idf;
                databaseIndexer.updateTfIdf(tfIdf);
            }
        }
    }

    private Double getIdf(Word word){
        Integer pageCount = databaseIndexer.getPageCount();
        Integer numOfPagesWithWord = databaseIndexer.getNumOfPagesWithWord(word);
        return Math.log(numOfPagesWithWord/pageCount);
    }

}

public class IndexStarter implements Runnable {
    private DatabaseIndexer databaseIndexer;

    public IndexStarter(DatabaseIndexer databaseIndexer) {
        this.databaseIndexer = databaseIndexer;
    }

    @Override
    public void run() {
        ExecutorService executor = Executors.newCachedThreadPool();
        while(!Thread.currentThread().isInterrupted()){
            try {
                List<WebPage> webPagesToIndex = databaseIndexer.getPagesToIndex();
                if(webPagesToIndex==null){
                    Thread.sleep(10000);
                } else{
                    for(WebPage webPage: webPagesToIndex){
                        executor.execute(new Indexer(webPage,databaseIndexer));
                    }
                }
            } catch (InterruptedException | IOException e) {
                e.printStackTrace();
                Thread.currentThread().interrupt();
            }
        }
    }
}

public class WordPack {
    private Map<String,List<Integer>> wordMap;
    private Integer numOfWords;
    private WebPage webPageToIndex;

    public WordPack(Map<String, List<Integer>> wordMap, Integer numOfWords, WebPage webPageToIndex) {
        this.wordMap = wordMap;
        this.numOfWords = numOfWords;
        this.webPageToIndex = webPageToIndex;
    }

    public Map<String, List<Integer>> getWordMap() {
        return wordMap;
    }

    public void setWordMap(Map<String, List<Integer>> wordMap) {
        this.wordMap = wordMap;
    }

    public Integer getNumOfWords() {
        return numOfWords;
    }

    public void setNumOfWords(Integer numOfWords) {
        this.numOfWords = numOfWords;
    }

    public WebPage getWebPageToIndex() {
        return webPageToIndex;
    }

    public void setWebPageToIndex(WebPage webPageToIndex) {
        this.webPageToIndex = webPageToIndex;
    }
}

public class Ranker {
    private DatabaseRanker databaseRanker;

    public Ranker(DatabaseRanker databaseRanker) {
        this.databaseRanker = databaseRanker;
    }

    public List<String> findWebPagesByWords(List<String> inStrWords){
        List<Word> words = new ArrayList<>();
        for (String inWord :inStrWords){
            Word word = databaseRanker.getWord(inWord);
            if(word!= null)
                words.add(word);
        }
        if(words.isEmpty())
            return null;
        Integer totalWordCount = databaseRanker.getWordCount();
        

    }

    public List<String> findWebPagesBySentence(List<String> sentence){

        return null;
    }
}

public class WebPageVector implements Comparator<WebPageVector>{
    private String url;
    private Double[] vector;
    private Double weight;

    @Override
    public int compare(WebPageVector o1, WebPageVector o2) {
        Double result = o2.weight - o1.weight;
        return (result < 0) ? -1 : ((result > 0) ? 1 : 0);
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Double getWeight() {
        return weight;
    }

    public void setWeight(Double weight) {
        this.weight = weight;
    }
}
