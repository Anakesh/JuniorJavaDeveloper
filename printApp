public class ChatClient {
    private SocketAddress socketAddress;
    private IOConnection connection;
    private Set<String> commands;

    public ChatClient(SocketAddress address){
        this.socketAddress = address;
        commands = new HashSet<>();
        commands.add("/list_users");
        commands.add("/server_time");
        commands.add("/ping");
    }

    private void start(){
        ConsoleHelper.writeString("Enter your name");
        String name = ConsoleHelper.readString();

        while(true){
            ConsoleHelper.writeString("Enter your message");
            String msg = ConsoleHelper.readString().trim();
            Message message = new Message(name, msg);
            try(Socket socket = new Socket()) {
                socket.connect(socketAddress);
                connection = new IOConnection(socket);
                Message answer = parseMessage(message);
                ConsoleHelper.writeString(answer.toString());
                connection.close();
            } catch (IOException e1) {
                e1.printStackTrace();
            } catch (ChatException e) {
                ConsoleHelper.writeString(e.getMessage());
                //e.printStackTrace();
            }
        }
    }

    private Message parseMessage(Message message) throws ChatException {
        Message answer;
        try {
            if (commands.contains(message.getMessText())) {
                answer = doCommand(message);
            } else {
                answer = sendMessage(message);
            }
        } catch (IOException e) {
            throw new ChatException("Ошибка соединения", e);
        } catch (ClassNotFoundException e) {
            throw new ChatException("Сервер не отвечает", e);
        }
        return answer;
    }

    private Message doCommand(Message message) throws IOException, ClassNotFoundException, ChatException {
        Message answer;
        switch (message.getMessText()) {
            case "/list_users":
                answer = sendMessage(message);
                break;
            case "/server_time":
                answer = sendMessage(message);
                break;
            case "/ping":
                Date sendDate = new Date();
                answer = sendMessage(message);
                Date responseDate = new Date();
                int ping = (int) (responseDate.getTime() - sendDate.getTime());
                answer.setMessText("\nПинг равен: " + ping + " мс");
                break;
            default:
                throw new ChatException("Команда не найдена");

        }
        return answer;
    }


    private Message sendMessage(Message message) throws IOException, ClassNotFoundException {
        connection.send(message);
        Message answer = connection.receive();
        return answer;
    }



    private static SocketAddress parseAddress(String address) {
        String[] strings = address.split(":");
        return new InetSocketAddress(strings[0],Integer.parseInt(strings[1]));
    }

    public static void main(String[] args) {

        String address = null;
        if(args!= null&&args.length>0){
            address = args[0];
        }
        if(address  == null){
           ConsoleHelper.writeString("Enter server IP and port");
            address = ConsoleHelper.readString();
        }

//        "127.0.0.1:8080"
        ChatClient client = new ChatClient(parseAddress(address));
        client.start();
    }
}

public class ChatServer {
    private int port;
    private final String name = "Server";
    private Set<String> commands;
    private Set<String> users;
    private IOConnection connection;


    public ChatServer(int port) {
        this.port = port;
        this.users = new HashSet<>();
        commands = getCommands();
    }
    public Set<String> getCommands(){
        Set<String> comms = new HashSet<>();
        comms.add("/list_users");
        comms.add("/server_time");
        comms.add("/ping");
        return comms;
    }

    public void start() {
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            ConsoleHelper.writeString("Server started on:" +
                    serverSocket);
            while (true) {
                Socket socket = serverSocket.accept();
                connection = new IOConnection(socket);
                Message message = connection.receive();
                ConsoleHelper.writeString(message.toString());
                Message answer = handleMessage(message);
                connection.send(answer);
                connection.close();
            }

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    private Message handleMessage(Message message) throws IOException {
        Pattern comPattern = Pattern.compile("^/.*");
        Matcher comMatcher = comPattern.matcher(message.getMessText());
        users.add(message.getSender());
        if (comMatcher.matches()) {
            if (commands.contains(message.getMessText())) {
                return doCommand(message.getMessText());
            } else
                return new Message(name, "\nНеизвестная команда");
        } else
            return new Message(name, "\nСервер получил следующее сообщение: '" + message.getMessText() + "'");
    }

    private Message doCommand(String messText) throws IOException {
        Message message = null;
        switch(messText){
            case "/list_users":
                StringBuilder answer = new StringBuilder();
                answer.append("\nСписок пользователей заходивших на сервер:\n");
                for (String user : users) {
                    answer.append(user).append('\n');
                }
                message = new Message(name,answer.toString());
                break;
            case "/server_time":
                Date currentDate = new Date();

                message =  new Message(name,currentDate.toString());
                break;
            case "/ping":
                message = new Message(name,"");
                break;
        }
        return message;
    }

    public static void main(String[] args) {
        int port = Integer.parseInt(args[0]);
        ChatServer server = new ChatServer(port);
        server.start();
    }
}

public class IOConnection {
    private Socket socket;
    private ObjectOutputStream out;
    private ObjectInputStream in;

    public IOConnection(Socket socket) throws IOException {
        this.socket = socket;
        this.out = new ObjectOutputStream(socket.getOutputStream());
        this.in = new ObjectInputStream(socket.getInputStream());
    }

    public void send(Message mess) throws IOException {
        out.writeObject(mess);
        out.flush();
    }

    public Message receive() throws IOException, ClassNotFoundException {
        return (Message) in.readObject();
    }
    public void close() throws IOException {
        this.in.close();
        this.out.close();
    }

    public SocketAddress getRemoteSocketAddress(){
        return socket.getRemoteSocketAddress();
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();
        out.close();
        in.close();
    }
}

public class ConsoleHelper {
    public static void writeString(String text){
        System.out.println(text);
    }
    public static String readString(){
        Scanner in = new Scanner(System.in);
        return in.nextLine();
    }
}

public class TableException extends Exception {
    public TableException() {
        super();
    }

    public TableException(String message) {
        super(message);
    }

    public TableException(String message, Throwable cause) {
        super(message, cause);
    }
}

public class Message implements Serializable {
    private String messText;
    private String sender;
    public Message(String sender, String messText){
        this.sender = sender;
        this.messText = messText;
    }

    Set<String> str = new HashSet<>();
    @Override
    public String toString() {

        return "From '" + sender + "':"+ messText;
    }

    public String getMessText() {
        return messText;
    }

    public void setMessText(String messText) {
        this.messText = messText;
    }

    public String getSender() {
        return sender;
    }

    public void setSender(String sender) {
        this.sender = sender;
    }
}
